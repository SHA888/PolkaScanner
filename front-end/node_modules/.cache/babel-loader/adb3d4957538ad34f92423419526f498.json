{"remainingRequest":"/home/rahul/PolkaScanner/front-end/node_modules/babel-loader/lib/index.js!/home/rahul/PolkaScanner/front-end/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/rahul/PolkaScanner/front-end/src/connection.js","dependencies":[{"path":"/home/rahul/PolkaScanner/front-end/src/connection.js","mtime":1622194468601},{"path":"/home/rahul/PolkaScanner/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1622194467134},{"path":"/home/rahul/PolkaScanner/front-end/node_modules/babel-loader/lib/index.js","mtime":1622194467098},{"path":"/home/rahul/PolkaScanner/front-end/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1622194466978}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.index-of\";\nimport { default_endpoint } from \"./config.js\";\nvar endpoint = localStorage.getItem(\"endpoint\");\n\nif (!endpoint || typeof endpoint !== \"string\" || endpoint.indexOf(\"ws\") !== 0) {\n  localStorage.setItem(\"endpoint\", default_endpoint);\n}\n\nvar _require = require(\"@polkadot/api\"),\n    ApiPromise = _require.ApiPromise,\n    WsProvider = _require.WsProvider;\n\nvar wsProvider = new WsProvider(localStorage.getItem(\"endpoint\"));\nvar api = ApiPromise.create({\n  provider: wsProvider\n}); // // no blockHash is specified, so we retrieve the latest\n// const signedBlock = await api.rpc.chain.getBlock();\n// // the information for each of the contained extrinsics\n// signedBlock.block.extrinsics.forEach((ex, index) => {\n//   // the extrinsics are decoded by the API, human-like view\n//   console.log(index, ex.toHuman());\n//   const { isSigned, meta, method: { args, method, section } } = ex;\n//   // explicit display of name, args & documentation\n//   console.log(`${section}.${method}(${args.map((a) => a.toString()).join(', ')})`);\n//   console.log(meta.documentation.map((d) => d.toString()).join('\\n'));\n//   // signer/nonce info\n//   if (isSigned) {\n//     console.log(`signer=${ex.signer.toString()}, nonce=${ex.nonce.toString()}`);\n//   }\n// });\n// // no blockHash is specified, so we retrieve the latest\n// const signedBlock = await api.rpc.chain.getBlock();\n// const allRecords = await api.query.system.events.at(signedBlock.block.header.hash);\n// // map between the extrinsics and events\n// signedBlock.block.extrinsics.forEach(({ method: { method, section } }, index) => {\n//   // filter the specific events based on the phase and then the\n//   // index of our extrinsic in the block\n//   const events = allRecords\n//     .filter(({ phase }) =>\n//       phase.isApplyExtrinsic &&\n//       phase.asApplyExtrinsic.eq(index)\n//     )\n//     .map(({ event }) => `${event.section}.${event.method}`);\n//   console.log(`${section}.${method}:: ${events.join(', ') || 'no events'}`);\n// });\n// const util = require(\"@polkadot/util\");\n\nexport default api;",{"version":3,"sources":["/home/rahul/PolkaScanner/front-end/src/connection.js"],"names":["default_endpoint","endpoint","localStorage","getItem","indexOf","setItem","require","ApiPromise","WsProvider","wsProvider","api","create","provider"],"mappings":";AAAA,SAASA,gBAAT;AAEA,IAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAjB;;AACA,IAAI,CAACF,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAAjC,IAA6CA,QAAQ,CAACG,OAAT,CAAiB,IAAjB,MAA2B,CAA5E,EAA+E;AAC7EF,EAAAA,YAAY,CAACG,OAAb,CAAqB,UAArB,EAAiCL,gBAAjC;AACD;;eAEkCM,OAAO,CAAC,eAAD,C;IAAlCC,U,YAAAA,U;IAAYC,U,YAAAA,U;;AACpB,IAAMC,UAAU,GAAG,IAAID,UAAJ,CAAeN,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAf,CAAnB;AACA,IAAIO,GAAG,GAAGH,UAAU,CAACI,MAAX,CAAkB;AAAEC,EAAAA,QAAQ,EAAEH;AAAZ,CAAlB,CAAV,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA,eAAeC,GAAf","sourcesContent":["import { default_endpoint } from \"./config.js\";\r\n\r\nconst endpoint = localStorage.getItem(\"endpoint\");\r\nif (!endpoint || typeof endpoint !== \"string\" || endpoint.indexOf(\"ws\") !== 0) {\r\n  localStorage.setItem(\"endpoint\", default_endpoint);\r\n}\r\n\r\nconst { ApiPromise, WsProvider } = require(\"@polkadot/api\");\r\nconst wsProvider = new WsProvider(localStorage.getItem(\"endpoint\"));\r\nlet api = ApiPromise.create({ provider: wsProvider });\r\n\r\n// // no blockHash is specified, so we retrieve the latest\r\n// const signedBlock = await api.rpc.chain.getBlock();\r\n\r\n// // the information for each of the contained extrinsics\r\n// signedBlock.block.extrinsics.forEach((ex, index) => {\r\n//   // the extrinsics are decoded by the API, human-like view\r\n//   console.log(index, ex.toHuman());\r\n\r\n//   const { isSigned, meta, method: { args, method, section } } = ex;\r\n\r\n//   // explicit display of name, args & documentation\r\n//   console.log(`${section}.${method}(${args.map((a) => a.toString()).join(', ')})`);\r\n//   console.log(meta.documentation.map((d) => d.toString()).join('\\n'));\r\n\r\n//   // signer/nonce info\r\n//   if (isSigned) {\r\n//     console.log(`signer=${ex.signer.toString()}, nonce=${ex.nonce.toString()}`);\r\n//   }\r\n// });\r\n\r\n// // no blockHash is specified, so we retrieve the latest\r\n// const signedBlock = await api.rpc.chain.getBlock();\r\n// const allRecords = await api.query.system.events.at(signedBlock.block.header.hash);\r\n\r\n// // map between the extrinsics and events\r\n// signedBlock.block.extrinsics.forEach(({ method: { method, section } }, index) => {\r\n//   // filter the specific events based on the phase and then the\r\n//   // index of our extrinsic in the block\r\n//   const events = allRecords\r\n//     .filter(({ phase }) =>\r\n//       phase.isApplyExtrinsic &&\r\n//       phase.asApplyExtrinsic.eq(index)\r\n//     )\r\n//     .map(({ event }) => `${event.section}.${event.method}`);\r\n\r\n//   console.log(`${section}.${method}:: ${events.join(', ') || 'no events'}`);\r\n// });\r\n\r\n// const util = require(\"@polkadot/util\");\r\nexport default api;\r\n"]}]}